// Code generated by "requestgen -method POST -url /v5/position/set-leverage -type SetPositionLevelRequest -responseType .PositionLevelResponse"; DO NOT EDIT.

package bybitapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (s *SetPositionLevelRequest) Category(category Category) *SetPositionLevelRequest {
	s.category = category
	return s
}

func (s *SetPositionLevelRequest) Symbol(symbol string) *SetPositionLevelRequest {
	s.symbol = symbol
	return s
}

func (s *SetPositionLevelRequest) BuyLeverage(buyLeverage string) *SetPositionLevelRequest {
	s.buyLeverage = buyLeverage
	return s
}

func (s *SetPositionLevelRequest) SellLeverage(sellLeverage string) *SetPositionLevelRequest {
	s.sellLeverage = sellLeverage
	return s
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (s *SetPositionLevelRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if s.isVarSlice(_v) {
			s.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (s *SetPositionLevelRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check category field -> json key category
	category := s.category

	// TEMPLATE check-required
	if len(category) == 0 {
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch category {
	case "inverse", "linear":
		params["category"] = category

	default:
		return nil, fmt.Errorf("category value %v is invalid", category)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of category
	params["category"] = category
	// check symbol field -> json key symbol
	symbol := s.symbol

	// TEMPLATE check-required
	if len(symbol) == 0 {
		return nil, fmt.Errorf("symbol is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of symbol
	params["symbol"] = symbol
	// check buyLeverage field -> json key buyLeverage
	buyLeverage := s.buyLeverage

	// TEMPLATE check-required
	if len(buyLeverage) == 0 {
		return nil, fmt.Errorf("buyLeverage is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of buyLeverage
	params["buyLeverage"] = buyLeverage
	// check sellLeverage field -> json key sellLeverage
	sellLeverage := s.sellLeverage

	// TEMPLATE check-required
	if len(sellLeverage) == 0 {
		return nil, fmt.Errorf("sellLeverage is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of sellLeverage
	params["sellLeverage"] = sellLeverage

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (s *SetPositionLevelRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := s.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if s.isVarSlice(_v) {
			s.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (s *SetPositionLevelRequest) GetParametersJSON() ([]byte, error) {
	params, err := s.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (s *SetPositionLevelRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (s *SetPositionLevelRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (s *SetPositionLevelRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (s *SetPositionLevelRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (s *SetPositionLevelRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := s.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (s *SetPositionLevelRequest) GetPath() string {
	return "/v5/position/set-leverage"
}

// Do generates the request object and send the request object to the API endpoint
func (s *SetPositionLevelRequest) Do(ctx context.Context) (*PositionLevelResponse, error) {

	params, err := s.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = s.GetPath()

	req, err := s.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := s.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse PositionLevelResponse

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}

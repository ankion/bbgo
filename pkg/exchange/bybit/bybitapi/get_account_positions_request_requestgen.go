// Code generated by "requestgen -method GET -responseType .APIResponse -responseDataField Result -url /v5/position/list -type GetAccountPositionsRequest -responseDataType .PositionsResponse"; DO NOT EDIT.

package bybitapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (g *GetAccountPositionsRequest) Category(category Category) *GetAccountPositionsRequest {
	g.category = category
	return g
}

func (g *GetAccountPositionsRequest) Symbol(symbol string) *GetAccountPositionsRequest {
	g.symbol = &symbol
	return g
}

func (g *GetAccountPositionsRequest) BaseCoin(baseCoin string) *GetAccountPositionsRequest {
	g.baseCoin = &baseCoin
	return g
}

func (g *GetAccountPositionsRequest) SettleCoin(settleCoin string) *GetAccountPositionsRequest {
	g.settleCoin = &settleCoin
	return g
}

func (g *GetAccountPositionsRequest) Limit(limit uint64) *GetAccountPositionsRequest {
	g.limit = &limit
	return g
}

func (g *GetAccountPositionsRequest) Cursor(cursor string) *GetAccountPositionsRequest {
	g.cursor = &cursor
	return g
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (g *GetAccountPositionsRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}
	// check category field -> json key category
	category := g.category

	// TEMPLATE check-required
	if len(category) == 0 {
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch category {
	case "inverse", "linear":
		params["category"] = category

	default:
		return nil, fmt.Errorf("category value %v is invalid", category)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of category
	params["category"] = category
	// check symbol field -> json key symbol
	if g.symbol != nil {
		symbol := *g.symbol

		// TEMPLATE check-required
		if len(symbol) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of symbol
		params["symbol"] = symbol
	} else {
	}
	// check baseCoin field -> json key baseCoin
	if g.baseCoin != nil {
		baseCoin := *g.baseCoin

		// TEMPLATE check-required
		if len(baseCoin) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of baseCoin
		params["baseCoin"] = baseCoin
	} else {
	}
	// check settleCoin field -> json key settleCoin
	if g.settleCoin != nil {
		settleCoin := *g.settleCoin

		// TEMPLATE check-required
		if len(settleCoin) == 0 {
			settleCoin = "USDT"
		}
		// END TEMPLATE check-required

		// assign parameter of settleCoin
		params["settleCoin"] = settleCoin
	} else {
		settleCoin := "USDT"

		// assign parameter of settleCoin
		params["settleCoin"] = settleCoin
	}
	// check limit field -> json key limit
	if g.limit != nil {
		limit := *g.limit

		// TEMPLATE check-required
		// END TEMPLATE check-required

		// assign parameter of limit
		params["limit"] = limit
	} else {
	}
	// check cursor field -> json key cursor
	if g.cursor != nil {
		cursor := *g.cursor

		// TEMPLATE check-required
		if len(cursor) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of cursor
		params["cursor"] = cursor
	} else {
	}

	query := url.Values{}
	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (g *GetAccountPositionsRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (g *GetAccountPositionsRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := g.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (g *GetAccountPositionsRequest) GetParametersJSON() ([]byte, error) {
	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (g *GetAccountPositionsRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (g *GetAccountPositionsRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (g *GetAccountPositionsRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (g *GetAccountPositionsRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (g *GetAccountPositionsRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := g.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (g *GetAccountPositionsRequest) GetPath() string {
	return "/v5/position/list"
}

// Do generates the request object and send the request object to the API endpoint
func (g *GetAccountPositionsRequest) Do(ctx context.Context) (*PositionsResponse, error) {

	// no body params
	var params interface{}
	query, err := g.GetQueryParameters()
	if err != nil {
		return nil, err
	}

	var apiURL string

	apiURL = g.GetPath()

	req, err := g.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := g.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse APIResponse

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	var data PositionsResponse
	if err := json.Unmarshal(apiResponse.Result, &data); err != nil {
		return nil, err
	}
	return &data, nil
}
